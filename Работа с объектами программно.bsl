		 
#Область Задача1

&НаКлиенте
Процедура ПолучитьЗначениеКонстанты(Команда)
	ПолучитьЗначениеКонстантыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначениеКонстантыНаСервере()

	//1. Получить значение константы "МаксимальныйРазмерФайла"
	МаксРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	Сообщить(МаксРазмерФайла);
КонецПроцедуры

#КонецОбласти

#Область Задача2
		 
&НаКлиенте
Процедура ИзменитьКонстанту(Команда)
	ИзменитьКонстантуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонстантуНаСервере()

	//2. Установить для константы "ДатаЗапретаРедактирования" значение - последний день предыдущего месяца
	ТекДата = ТекущаяДата();
	КонецМесяца = НачалоМесяца(ТекДата) - 1;
	
	Константы.ДатаЗапретаРедактирования.Установить(КонецМесяца);
	
	ДатаЗапретаРедактирования = Константы.ДатаЗапретаРедактирования.Получить();
	Сообщить(ДатаЗапретаРедактирования);

КонецПроцедуры

#КонецОбласти

#Область Задача3

&НаКлиенте
Процедура НайтиНоменклатуруПоКоду(Команда)
	НайтиНоменклатуруПоКодуНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиНоменклатуруПоКодуНаСервере()
	
	//3. В справочнике "Номенклатура" найти номенклатуру по коду "000000022" и сообщить её наименование.
	//Если номенклатура отсутствует в справочнике, сообщить об этом пользователю
	НайденнаяСсылка = Справочники.Номенклатура.НайтиПоКоду("000000022");
	
	Если НайденнаяСсылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Сообщить("Номенклатура по коду не найдена");
	Иначе
		Сообщить(НайденнаяСсылка.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Задача4

&НаКлиенте
Процедура НайтиНоменклатуруПоНаименованию(Команда)
	НайтиНоменклатуруПоНаименованиюНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиНоменклатуруПоНаименованиюНаСервере()
	
	//4. В справочнике "Номенклатура" найти номенклатуру по наименованию "Смартфон Apple iPhone 13 128GB (темная ночь)"
	//и сообщить артикул найденной номенклатуры.
	//Если номенклатура отсутствует в справочнике, сообщить об этом пользователю
	НайденнаяСсылка = Справочники.Номенклатура.НайтиПоНаименованию("Смартфон Apple iPhone 13 128GB (темная ночь)");
	
	Если НайденнаяСсылка.Пустая() Тогда
		Сообщить("Товар не найден по наименованию")
	Иначе
		Сообщить(НайденнаяСсылка.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Задача5

&НаКлиенте
Процедура НайтиКонтрагентаПоИНН(Команда)
	НайтиКонтрагентаПоИНННаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиКонтрагентаПоИНННаСервере()
	
	//5. В справочнике "Контрагенты" найти контрагента по УНП "196874587"
	//Если контрагент отсутствует в справочнике, сообщить об этом пользователю
	НайденнаяСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("УНП", "196874587");
	
	Если НайденнаяСсылка.Пустая() Тогда
		Сообщить("Товар не найден по реквизиту");
	Иначе
		Сообщить(НайденнаяСсылка.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти   

#Область Задача6   

&НаКлиенте
Процедура ПоискИСозданиеНоменклатуры(Команда)
	ПоискИСозданиеНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоискИСозданиеНоменклатурыНаСервере()
	
	//6. В справочнике "Номенклатура" в группе "Телевизоры" нужно выполнить поиск  
	//номенклатуры по наименованию "Телевизор Thomson T43USM7020" (артикул "T43USM7020").
	//Если номенклатура найдена, то нужно сообщить значение реквизита "Наименование".
	//Если номенклатуры нет в справочнике, нужно её создать программно и заполнить реквизиты:
	//Наименование: "Телевизор Thomson T43USM7020"
	//Артикул: "T43USM7020"
	//ВидНоменклатуры: "Телевизоры" (ссылка на справочник "Виды номенклатуры")
	//Родитель (группа): "Телевизоры" (ссылка на группу справочника "Номенклатура"
	//Единица измерения: "шт" (ссылка на справочник "Классификатор единиц измерения")
	СправочникСсылка = Справочники.Номенклатура.НайтиПоНаименованию("Телевизор Thomson T43USM7020");
	СсылкаНаСправочникВидыНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Телевизоры");
	СсылкаНаГруппуНоменклатуры = Справочники.Номенклатура.НайтиПоНаименованию("Телевизоры");
	
	Если СправочникСсылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		
		Сообщить("Товар не найден по коду");
		НовыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйОбъект.Наименование = "Телевизор Thomson T43USM7020";
		НовыйОбъект.Артикул = "T43USM7020";
		НовыйОбъект.ВидНоменклатуры = СсылкаНаСправочникВидыНоменклатуры;
		НовыйОбъект.Родитель = СсылкаНаГруппуНоменклатуры;
		НовыйОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		НовыйОбъект.Записать();
		Сообщить("Телевизор Thomson T43USM7020 создан");
		
	Иначе
		Сообщить(СправочникСсылка.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область Задача7  

&НаКлиенте
Процедура НайтиДоговорКонтрагента(Команда)
	НайтиДоговорКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиДоговорКонтрагентаНаСервере()
	
	//7. Найти договор контрагента "Электротовары база ООО" с номером "14". 
	//Если договор отсутствует в справочнике, сообщить об этом пользователю
	КонтрагентЭлектротоварыСсылка = Справочники.Контрагенты.НайтиПоНаименованию("Электротовары база ООО");
	
	НайденнаяСсылка = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер","14",,КонтрагентЭлектротоварыСсылка);
	
	Если НайденнаяСсылка.Пустая() Тогда
		Сообщить("Договор контрагента не найден");
	Иначе
		Сообщить(НайденнаяСсылка.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Задача8    

&НаКлиенте
Процедура КоличествоДоговоровСКонтрагентом(Команда)
	КоличествоДоговоровСКонтрагентомНаСервере();
КонецПроцедуры

&НаСервере
Процедура КоличествоДоговоровСКонтрагентомНаСервере()
	
	//8. Нужно определить количество договоров контрагента "Электротовары база ООО" (ИНН 196874587)
	//и сообщить пользователю в формате "Найдено договоров: [Количество]"
	//***Для договора контрагента "АйтиСвет ООО" (ИНН 12161611661)***
	Счетчик = 0;
	СправочникСсылкаАйтиСвет = Справочники.Контрагенты.НайтиПоНаименованию("АйтиСвет ООО");
	
	ВыборкаСправочника = Справочники.ДоговорыКонтрагентов.Выбрать();
	
	Пока ВыборкаСправочника.Следующий() Цикл
		
		Если ВыборкаСправочника.Владелец = СправочникСсылкаАйтиСвет Тогда
			
			Счетчик = Счетчик + 1;
			Сообщить("Добавлен договор: " + ВыборкаСправочника.Наименование + ", rоличество договоров контрагента ""АйтиСвет ООО"" стало: " + Счетчик);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Общее количество договоров ""АйтиСвет ООО"": " + счетчик);
	
КонецПроцедуры

#КонецОбласти

#Область Задача9

&НаКлиенте
Процедура ПометитьНаУдалениеКонтрагента(Команда)
	ПометитьНаУдалениеКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеКонтрагентаНаСервере()
	
	//9. Пометить на удаление контрагента "Васильков В.А." (ИНН 12345678)
	Васильков = Справочники.Контрагенты.НайтиПоНаименованию("Васильков В.А.");
	ОбъектВасильков = Васильков.ПолучитьОбъект();
	ОбъектВасильков.ПометкаУдаления = Истина;
	ОбъектВасильков.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Задача10

&НаКлиенте
Процедура ПолучитьЮридическийАдресКонтрагента(Команда)
	ПолучитьЮридическийАдресКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьЮридическийАдресКонтрагентаНаСервере()
	
	//10. Получить юридический адрес контрагента "Прокси Торг ООО" (ИНН 196245564) и сообщить его пользователю
	СсылкаПроксиТорг = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "196245564");
	ТабличнаяЧасть = СсылкаПроксиТорг.КонтактнаяИнформация;
	
	
	Для каждого Строка из ТабличнаяЧасть Цикл
		
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента Тогда
			Сообщить(Строка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область Задача11

&НаКлиенте
Процедура ЗаполнитьЮридическийАдресКонтрагента(Команда)
	ЗаполнитьЮридическийАдресКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЮридическийАдресКонтрагентаНаСервере()
	
	//11. Заполнить юридический адрес контрагента "Терминатор ООО" (ИНН 124124214) значением:
	//"119021, город Москва, ул. Льва Толстого, д. 16"
	//Дополнительно: при нажатии кнопки новая строка добавляется после последней строки
	СправочникТерминаторСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "124124214");
	СправочникТерминаторОбъект = СправочникТерминаторСсылка.ПолучитьОбъект();
	
	ТабЧастьКонтактнаяИнформация = СправочникТерминаторОбъект.КонтактнаяИнформация;
	КоличествоСтрокТабЧасти = ТабЧастьКонтактнаяИнформация.Количество();
	ТабЧастьКонтактнаяИнформация.Добавить(); //Добавили пустую строку в табличную часть
	
	ТабЧастьКонтактнаяИнформация[КоличествоСтрокТабЧасти].Значение = "город Москва, ул. Льва Толстого, д. 16"; //Заполняем колонки стр. табличной части
	ТабЧастьКонтактнаяИнформация[КоличествоСтрокТабЧасти].Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ТабЧастьКонтактнаяИнформация[КоличествоСтрокТабЧасти].Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента;
	
	СправочникТерминаторОбъект.Записать();
	
КонецПроцедуры
	
#КонецОбласти 

#Область Задача12

&НаСервере
Процедура ИзменитьАртикулНоменклатурыНаСервере()
	
	//12. Изменить артикул номенклатуры "Смартфон POCO X3" (код "000000003"):
	//установить значение артикула "X-3P"
	СсылкаНаСправочник = Справочники.Номенклатура.НайтиПоНаименованию("Смартфон POCO X3");
	СправочникОбъект = СсылкаНаСправочник.ПолучитьОбъект();
	СправочникОбъект.Артикул = "X-3P";
	СправочникОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАртикулНоменклатуры(Команда)
	ИзменитьАртикулНоменклатурыНаСервере();
КонецПроцедуры
	
#КонецОбласти

#Область Задача13

&НаКлиенте
Процедура СоздатьГруппуНоменклатуры(Команда)
	СоздатьГруппуНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьГруппуНоменклатурыНаСервере()
	
	//13. Создать группу номенклатуры с наименованием "Роботы-пылесосы"
	НовыйОбъект = Справочники.Номенклатура.СоздатьГруппу();
	НовыйОбъект.Наименование = "Роботы-пылесосы";
	НовыйОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Задача14

&НаКлиенте
Процедура ПереместитьНоменклатуруВГруппу(Команда)
	ПереместитьНоменклатуруВГруппуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПереместитьНоменклатуруВГруппуНаСервере()
	
	//14. Переместить номенклатуру с наименованием "Робот-пылесос Redmond RV-R650S WiFi" в группу "Роботы-пылесосы"
	СсылкаНаГруппу = Справочники.Номенклатура.НайтиПоНаименованию("Роботы-пылесосы");
	СправочникСсылка = Справочники.Номенклатура.НайтиПоНаименованию("Робот-пылесос Redmond RV-R650S WiFi");
	
	СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	СправочникОбъект.Родитель = СсылкаНаГруппу;
	СправочникОбъект.Записать();
КонецПроцедуры

#КонецОбласти

#Область Задача15

&НаКлиенте
Процедура ЗаполнитьПроизводственныйКалендарь(Команда)
	ЗаполнитьПроизводственныйКалендарьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроизводственныйКалендарьНаСервере()
	
	//15. Заполнить регистр сведений "Производственный календарь" данными за текущий год:
	//добавить для каждой даты текушего года запись в регистр сведений и заполнить "ВидДня" по следующему принципу:
	//1 января и 8 марта: Вид дня "Праздник"
	//31 декабря и 7 марта: Вид дня "Предпраздничный"
	//Для всех остальных дат: 
	//   - если день недели "Суббота", то вид дня "Суббота"
	//   - если день недели "Воскресенье", то вид дня "Воскресенье"
	//   - если день недели с понедельника по пятницу, то вид дня "Рабочий"
	ТекДата = ТекущаяДата();
	
	НачалоГода = НачалоГода(ТекДата);
	КонецГода = КонецГода(ТекДата);
	КоличествоДнейВГоду = Цел((КонецГода - НачалоГода)/86400) + 1;
	
	ПервоеЯнваря = НачалоГода;
	ТридцатьПервоеДекабря = НачалоДня(КонецМесяца(ДобавитьМесяц(ПервоеЯнваря,11)));
	ВосьмоеМарта = ДобавитьМесяц(НачалоГода, 2) + (86400*7);
	СедьмоеМарта = ВосьмоеМарта - 86400;
	
	ТекущийДень = НачалоГода;
	
	НаборЗаписей = РегистрыСведений.ПроизводственныйКалендарь.СоздатьНаборЗаписей();
	
	Для ИндексДня = 1 По КоличествоДнейВГоду Цикл
		
		НаборЗаписей.Добавить();
		НаборЗаписей[ИндексДня -1].Дата = ТекущийДень;
		
		Если ДеньНедели(ТекущийДень) = 7 Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Воскресенье;
		ИначеЕСли ДеньНедели(ТекущийДень) = 6 Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Суббота;
		ИначеЕсли ДеньНедели(ТекущийДень) = 1 ИЛИ ДеньНедели(ТекущийДень) = 2 ИЛИ ДеньНедели(ТекущийДень) = 3 ИЛИ ДеньНедели(ТекущийДень) = 4 ИЛИ ДеньНедели(ТекущийДень) = 5 Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Рабочий;
		КонецЕсли;
		
		Если ТекущийДень = ПервоеЯнваря Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Праздник;
		ИначеЕсли ТекущийДень = ВосьмоеМарта Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Праздник;
		ИначеЕсли ТекущийДень = СедьмоеМарта Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Предпраздничный;
			ИначеЕсли ТекущийДень = ТридцатьПервоеДекабря Тогда
			НаборЗаписей[ИндексДня -1].ВидДня = Перечисления.ВидыДнейКалендаря.Предпраздничный;
		КонецЕсли;
		
		ТекущийДень = ТекущийДень + 86400;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Задача16

&НаКлиенте
Процедура АктуальныйКурсДоллара(Команда)
	АктуальныйКурсДоллараНаСервере();
КонецПроцедуры

&НаСервере
Процедура АктуальныйКурсДоллараНаСервере()
	
	//16. Получить актуальный на текущую дату курс валют
	//из регистра сведений "Курсы валют" и сообщить его пользователю
	ТекДата = ТекущаяДата();
	СсылкаДоллар = Справочники.Валюты.НайтиПоНаименованию("Доллар США");
	СсылкаЕвро = Справочники.Валюты.НайтиПоНаименованию("Евро");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Валюта", СсылкаДоллар);
	ТекКурсДоллара = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДата, Отбор);
	Сообщить("Курс доллара на: " + ТекДата + ": " + ТекКурсДоллара.Курс);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Валюта", СсылкаЕвро);
	ТекКурсЕвро = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекДата, Отбор);
	Сообщить("Курс евро на: " + ТекДата + ": " + ТекКурсЕвро.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКурсыВалют(Команда)
	ЗаполнитьКурсыВалютНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсыВалютНаСервере()
	// Доп: Заполнить курсы валют (USD) случайными числами на каждую дату года
	ТекДата = ТекущаяДата();
	
	НачалоГода = НачалоГода(ТекДата);
	КонецГода = КонецГода(ТекДата);
	КоличествоДнейВГоду = Цел((КонецГода - НачалоГода)/86400) + 1;
	
	ТекущийДень = НачалоГода;
	
	Доллар = Справочники.Валюты.НайтиПоНаименованию("Доллар США");
	Евро = Справочники.Валюты.НайтиПоНаименованию("Евро");
	
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Для ИндексДня = 1 По КоличествоДнейВГоду Цикл
		
		НаборЗаписей.Добавить();
		
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(30,120);
		Центы = (ГСЧ.СлучайноеЧисло(0,100))/100;
		
		НаборЗаписей[(ИндексДня -1)*2].Курс = СлучайноеЧисло + Центы;
		НаборЗаписей[(ИндексДня -1)*2].Валюта = Доллар;
		НаборЗаписей[(ИндексДня -1)*2].Период = ТекущийДень;
		
		НаборЗаписей.Добавить();
		
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(30,120);
		Центы = (ГСЧ.СлучайноеЧисло(0,100))/100;
		
		НаборЗаписей[(ИндексДня -1)*2 +1].Курс = СлучайноеЧисло + Центы;
		НаборЗаписей[(ИндексДня -1)*2 +1].Валюта = Евро;
		НаборЗаписей[(ИндексДня -1)*2 +1].Период = ТекущийДень;
		
		ТекущийДень = ТекущийДень + 86400;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
	
#КонецОбласти